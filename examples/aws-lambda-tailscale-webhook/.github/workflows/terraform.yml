name: deploy.aws-tailscale-webhook

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # if you have/need it
          aws-region: ${{ env.AWS_REGION }}

      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile default
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile default

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff

      - name: Build Webhook (aws-lambda-tailscale-webhook)
        run: npm run deploy:prepare && npm install && npm run build

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -no-color
        continue-on-error: true
        env:
          TF_VAR_indent_webhook_secret: ${{ secrets.TAILSCALE_WEBHOOK_SECRET }}
          TF_VAR_indent_pull_webhook_secret: ${{ secrets.TAILSCALE_PULL_WEBHOOK_SECRET }}
          TF_VAR_okta_domain: ${{ secrets.TAILSCALE_API_KEY }}
          TF_VAR_okta_token: ${{ secrets.TAILSCALE_TAILNET}}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Actor: @${{ github.actor }}, Event: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve
        env:
          TF_VAR_indent_webhook_secret: ${{ secrets.TAILSCALE_WEBHOOK_SECRET }}
          TF_VAR_indent_pull_webhook_secret: ${{ secrets.TAILSCALE_PULL_WEBHOOK_SECRET }}
          TF_VAR_okta_domain: ${{ secrets.TAILSCALE_API_KEY }}
          TF_VAR_okta_token: ${{ secrets.TAILSCALE_TAILNET}}
